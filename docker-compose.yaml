version: "3.5"

# To speed up dev builds, check https://blog.rocketinsights.com/speeding-up-docker-development-on-the-mac/
# Good article on reverse proxy and dnsmasq: https://ianduffy.ie/blog/2019/02/22/local-development-with-virtual-hosts-and-https/
networks:
  main-network:
    driver: bridge

# We keep node modules in volumes for faster installs across container recreation and to prevent issue where installing a module would not be picked up immediately.
volumes:
  store-ui_node_modules:
  backstore-ui_node_modules:
  data-api_node_modules:

services:
  reverse-proxy:
    image: traefik:v2.3.6
    container_name: reverse-proxy-dev
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false # Don't expose all services by default, use `traefik.enable`

      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      # This is just for dev
      - --providers.file.directory=/configuration/
      - --providers.file.watch=true

    ports:
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/certs:/certs
      - ./dev/traefik/:/configuration/
    depends_on:
      - data-api
      - store-ui
      - backstore-ui
      - object-store
      - search
    networks:
      - main-network

  object-store:
    image: minio/minio:RELEASE.2021-03-17T02-33-02Z
    container_name: object-store-dev
    command: server /data
    expose:
      - 9000
    volumes:
      - ./volumes/data:/data
    networks:
      - main-network
    labels:
      - traefik.enable=true

      - traefik.http.routers.object-store.priority=1000
      - traefik.http.routers.object-store.rule=Host(`artifacts.lamk.dev`)
      - traefik.http.services.object-store.loadbalancer.server.port=9000
      - traefik.http.routers.object-store.entrypoints=websecure
      - traefik.http.routers.object-store.tls=true
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      # This disables the web client and it prevents redirects when actually trying to read an image
      MINIO_BROWSER: "off"

  search:
    image: typesense/typesense:0.14.0
    container_name: search-dev
    command: ./typesense-server
    expose:
      - 8108
    volumes:
      - ./volumes/search-data:/data
    networks:
      - main-network
    labels:
      - traefik.enable=true

      - traefik.http.routers.search.priority=1000
      - traefik.http.routers.search.rule=Host(`search.lamk.dev`)
      - traefik.http.services.search.loadbalancer.server.port=8108
      - traefik.http.routers.search.entrypoints=websecure
      - traefik.http.routers.search.tls=true
    environment:
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_API_KEY: 12345678

  data-api:
    image: lamk/data-api-dev
    build:
      context: ./packages/data-api
      target: dev
      args:
        - GPR_TOKEN=$GPR_TOKEN
    container_name: data-api-dev
    volumes:
      - ./packages/data-api:/usr/src/app:cached
      - data-api_node_modules:/usr/src/app/node_modules
    networks:
      - main-network
    expose:
      - 80
    ports:
      - 9229:9229 #debug port
    labels:
      - traefik.enable=true

      - traefik.http.routers.data-api.priority=1000
      - traefik.http.routers.data-api.rule=Host(`api.lamk.dev`)
      - traefik.http.services.data-api.loadbalancer.server.port=80
      - traefik.http.routers.data-api.entrypoints=websecure
      - traefik.http.routers.data-api.tls=true
    environment:
      GPR_TOKEN: $GPR_TOKEN
      PORT: 80
      HOST: "lamk.dev"
      JWT_SECRET: "1234dev"
      MONGODB_DB_NAME: db
      MONGODB_CONNECTION_STRING: "mongodb+srv://dev-user:ou1ewM4eGQH1lxLq@dev-6oiee.mongodb.net/test?retryWrites=true&w=majority"
      STORAGE_BUCKET_NAME: dev-bucket
      STORAGE_ENDPOINT: "artifacts.lamk.dev"
      STORAGE_ACCESS_KEY_ID: minio
      STORAGE_ACCESS_KEY_SECRET: minio123
      MAIL_SERVICE_API_KEY: "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"
      SEARCH_SERVICE_API_KEY: "12345678"
      SEARCH_SERVICE_ENDPOINT: "search.lamk.dev"
      NESTPAY_API_ENDPOINT: "https://entegrasyon.asseco-see.com.tr/fim/api"
      ANALYTICS_TRACKING_ID: "90f6dff8cd68254f0bcdedcc33ab7a14"
      ANALYTICS_SECRET_KEY: "f22176239f505cbdbb09dcaf23d6658e"
      # The bucket name is required for minio, but the CDN URL in production points to the bucket, not to the storage.
      ARTIFACTS_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      IMAGES_PROXY_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      ENABLE_SIGNUP: "true"
      # This is DANGEROUS if used in production, as it disables any certificate checks. Its fine for the devenv though, as node doesn't use the rootCA defined on the machine, so when we make requests to other *.lamk.dev services from within the service it fails.
      NODE_TLS_REJECT_UNAUTHORIZED: 0

  store-ui:
    image: lamk/store-ui-dev
    build:
      context: ./packages/store-ui
      target: dev
      args:
        - GPR_TOKEN=$GPR_TOKEN
    container_name: store-ui-dev
    volumes:
      - ./packages/store-ui:/usr/src/app:cached
      - store-ui_node_modules:/usr/src/app/node_modules
    networks:
      - main-network
    expose:
      - 80
    labels:
      - traefik.enable=true

      - traefik.http.routers.store-ui.priority=1 #Set to low priority so our services resolve before stores
      - traefik.http.routers.store-ui.entrypoints=websecure
      - traefik.http.routers.store-ui.rule=HostRegexp(`{subdomain:.+}.lamk.dev`)
      - traefik.http.routers.store-ui.service=store-ui
      - traefik.http.services.store-ui.loadbalancer.server.port=80
      - traefik.http.routers.store-ui.tls=true
    environment:
      GPR_TOKEN: $GPR_TOKEN
      API_ENDPOINT: "https://api.lamk.dev"
      # The bucket name is required for minio, but the CDN URL in production points to the bucket, not to the storage.
      ARTIFACTS_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      IMAGES_PROXY_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      ANALYTICS_TRACKING_ID: "90f6dff8cd68254f0bcdedcc33ab7a14"
      PORT: 80
      NESTPAY_GATEWAY_ENDPOINT: "https://entegrasyon.asseco-see.com.tr/fim/est3Dgate"
      # This is DANGEROUS if used in production, as it disables any certificate checks. Its fine for the devenv though, as node doesn't use the rootCA defined on the machine, so when we make requests to other *.lamk.dev services from within the service it fails.
      NODE_TLS_REJECT_UNAUTHORIZED: 0

  backstore-ui:
    image: lamk/backstore-ui-dev
    build:
      context: ./packages/backstore-ui
      target: dev
      args:
        - GPR_TOKEN=$GPR_TOKEN
    container_name: backstore-ui-dev
    volumes:
      - ./packages/backstore-ui:/usr/src/app:cached
      - backstore-ui_node_modules:/usr/src/app/node_modules
    networks:
      - main-network
    expose:
      - 80
    labels:
      - traefik.enable=true

      - traefik.http.routers.backstore-ui.priority=1000
      - traefik.http.routers.backstore-ui.rule=Host(`admin.lamk.dev`)
      - traefik.http.services.backstore-ui.loadbalancer.server.port=80
      - traefik.http.routers.backstore-ui.entrypoints=websecure
      - traefik.http.routers.backstore-ui.tls=true
    environment:
      GPR_TOKEN: $GPR_TOKEN
      REACT_APP_API_ENDPOINT: "https://api.lamk.dev"
      # The bucket name is required for minio, but the CDN URL in production points to the bucket, not to the storage.
      REACT_APP_ARTIFACTS_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      REACT_APP_IMAGES_PROXY_ENDPOINT: "https://artifacts.lamk.dev/dev-bucket"
      REACT_APP_ENABLE_SIGNUP: "true"
      PORT: 80
