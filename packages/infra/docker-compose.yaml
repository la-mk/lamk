version: '3.5'

# This is an example setup that would work in production, although it is not really useful for multi-server setup.
# To speed up dev builds, check https://blog.rocketinsights.com/speeding-up-docker-development-on-the-mac/
# Good article on reverse proxy and dnsmasq: https://ianduffy.ie/blog/2019/02/22/local-development-with-virtual-hosts-and-https/
networks:
  main-network:
    driver: bridge

services:
  reverse-proxy:
    image: traefik:v2.1.1
    container_name: reverse-proxy
    restart: always
    command:
      # - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false # Don't expose all services by default, use `traefik.enable`
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443
      - --certificatesresolvers.cert-resolve.acme.email=sradevski@live.com
      - --certificatesresolvers.cert-resolve.acme.storage=acme.json
      # The DNS challenge requires you to have a DO_AUTH_TOKEN environment variable set.
      # - --certificatesresolvers.cert-resolve.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.cert-resolve.acme.dnsChallenge=true
      - --certificatesresolvers.cert-resolve.acme.dnsChallenge.provider=digitalocean
      - --certificatesresolvers.cert-resolve.acme.dnsChallenge.delayBeforeCheck=20
    ports:
       - "80:80"
       - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - data-api
      - store-ui
      - backstore-ui
    networks:
      - main-network
    labels: 
      # global redirect to https
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      # middleware redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
    environment:
      # This is needed by Traefik to do proper let's encrypt DNS challenge.
      DO_AUTH_TOKEN: ${DIGITALOCEAN_TOKEN}
  data-api:
    image: lamk/data-api:1.0.14
    container_name: data-api
    restart: always
    networks:
      - main-network
    expose: 
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.data-api.priority=1000
      - traefik.http.routers.data-api.rule=Host(`api.${SYSTEM_TLD}`)
      - traefik.http.services.data-api.loadbalancer.server.port=80 
      - traefik.http.routers.data-api.tls=true
      # The store-ui domain is more generic, so a single definition for all subdomains is enough for the cert.
      # - traefik.http.routers.data-api.tls.certresolver=cert-resolve
      # - traefik.http.routers.data-api.tls.domains[0].main=api.${SYSTEM_TLD}
    environment: 
      PORT: 80
      HOST: ${SYSTEM_TLD}
      JWT_SECRET: $JWT_SECRET
      MONGODB_DB_NAME: db
      MONGODB_CONNECTION_STRING: $MONGODB_CONNECTION_STRING
      STORAGE_ENDPOINT: artifacts.${SYSTEM_TLD}
      STORAGE_ACCESS_KEY_ID: $SPACES_ACCESS_KEY_ID
      STORAGE_ACCESS_KEY_SECRET: $SPACES_SECRET_ACCESS_KEY
    
  store-ui:
    image: lamk/store-ui:1.0.5
    container_name: store-ui
    restart: always
    depends_on: 
      - data-api
    networks:
      - main-network
    expose: 
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.store-ui.priority=1 #Set to low priority so our services resolve before stores
      - traefik.http.routers.store-ui.rule=HostRegexp(`{subdomain:.+}.${SYSTEM_TLD}`)
      - traefik.http.services.store-ui.loadbalancer.server.port=80
      - traefik.http.routers.store-ui.tls=true
      - traefik.http.routers.store-ui.tls.certresolver=cert-resolve
      - traefik.http.routers.store-ui.tls.domains[0].main=*.${SYSTEM_TLD}
    environment: 
      API_ENDPOINT: https://api.${SYSTEM_TLD}
      ARTIFACTS_ENDPOINT: https://artifacts.${SYSTEM_TLD}
      PORT: 80

  backstore-ui:
    image: lamk/backstore-ui:1.0.6
    container_name: backstore-ui
    restart: always
    depends_on: 
      - data-api
    networks:
      - main-network
    expose: 
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.backstore-ui.priority=1000
      - traefik.http.routers.backstore-ui.rule=Host(`back.${SYSTEM_TLD}`)
      - traefik.http.services.backstore-ui.loadbalancer.server.port=80 
      - traefik.http.routers.backstore-ui.tls=true
      # - traefik.http.routers.backstore-ui.tls.certresolver=cert-resolve
      # - traefik.http.routers.backstore-ui.tls.domains[0].main=back.${SYSTEM_TLD}
    environment: 
      REACT_APP_API_ENDPOINT: https://api.${SYSTEM_TLD}
      REACT_APP_ARTIFACTS_ENDPOINT: https://artifacts.${SYSTEM_TLD}
      PORT: 80