import merge from 'lodash/fp/merge';
import { Application, Params } from '@feathersjs/feathers';
import { getCrudMethods } from '../setup';
import { OmitServerProperties } from '../utils/utils';
import { validate, validateSingle } from '../utils/modelUtils';
import v8n from 'v8n';

export const schema = {
  // ID is optional as it is autogenerated by server on creation.
  _id: v8n().optional(
    v8n()
      .string()
      .minLength(2)
      .maxLength(63),
    true,
  ),
  forStore: v8n()
    .string()
    .minLength(2)
    .maxLength(63),
  groupName: v8n()
    .string()
    .minLength(2)
    .maxLength(127),
  // positive also includes 0
  itemCountInGroup: v8n()
    .number()
    .positive(),
  // createdAt is optional as it is added by server on creation.
  createdAt: v8n().optional(
    v8n()
      .string()
      .minLength(2)
      .maxLength(63),
    true,
  ),
  modifiedAt: v8n().optional(
    v8n()
      .string()
      .minLength(2)
      .maxLength(63),
    true,
  ),
};

export interface ProductGroup {
  _id: string;
  forStore: string;
  groupName: string;
  itemCountInGroup: number;
  createdAt?: string;
  modifiedAt?: string;
}

export const getProductGroupSdk = (client: Application) => {
  const crudMethods = getCrudMethods<
    OmitServerProperties<ProductGroup>,
    ProductGroup
  >(client, 'productGroups');

  return {
    ...crudMethods,

    findForStore: (storeId: string, params?: Params) => {
      const options = merge({ query: { forStore: storeId } }, params);
      return crudMethods.find(options);
    },

    validate: (data: ProductGroup, ignoreRequired = false) => {
      return validate(schema, data, ignoreRequired);
    },
    validateSingle: (val: any, selector: string) => {
      return validateSingle(schema, val, selector);
    },
  };
};
